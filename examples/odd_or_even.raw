00000000

[RESERVED, MARKER: loop, number]

;; Prompt
                     PUSH_STRING_STACK "Enter a number:\0"
00000101 01000101 01101110 01110100 01100101 01110010 00100000 01100001 00100000 01101110 01110101 01101101 01100010 01100101 01110010 00111010 00100000 00000000
00001010 00000000    WRITE_TO 0

;; Get the rest of the input
00001110 00000001    MAKE_MARKER 1
00001001 00000000    | READ_CHAR_FROM 0
                     | ;; Check if char is a number (48-57)
00000111             | DUP_TOP
00000111             | DUP_TOP
00000100 00110000    | PUSH_STACK 48
11100110             | GREATER_EQUAL_THAN
10010001             | ROT_TWO
00000100 00111001    | PUSH_STACK 57
11100011             | LESS_EQUAL_THAN
11000001             | BINARY_AND
10100000 00001010    | IF_RUN_NEXT 10
                     | | ;; Add the char to number
00000111             | | DUP_TOP
00001010 00000000    | | WRITE_TO 0
00000100 00110000    | | PUSH_STACK 48
10000010             | | BINARY_SUBTRACT
00000010 00000010    | | LOAD_MEMORY 2
00000100 00001010    | | PUSH_STACK 10
10000101             | | BINARY_MULTIPLY
10000001             | | BINARY_ADD
00000011 00000010    | | STORE_MEMORY 2
                     | | ;; Loop back
00001111 00000001    | | GOTO_MARKER 1

;; Check if its odd or even
00000010 00000010    LOAD_MEMORY 2
00000100 00000010    PUSH_STACK 2
10000100             BINARY_MODULO
00000100 00000000    PUSH_STACK 0
11100001             EQUALS_TO

;; Print result
                     PUSH_STRING_STACK " is "
00000101 00100000 01101001 01110011 00100000 00000000
00001010 00000000    WRITE_TO 0

10100000 00000010    IF_NEXT_RUN 2
                     | PUSH_STRING_STACK "even\n\0"
00000101 01100101 01110110 01100101 01101110 00001010 00000000
10100001 00000001    | SKIP_NEXT 1
                     PUSH_STRING_STACK "odd\n\0"
00000101 01101111 01100100 01100100 00001010 00000000
00001010 00000000    WRITE_TO 0