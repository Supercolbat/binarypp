00000000

[RESERVED, FOR1, FOR2, n, y, i & x]

;; Print prompt
                     PUSH_STRING_STACK "Enter a number:\0"
00000101 01000101 01101110 01110100 01100101 01110010 00100000 01100001 00100000 01101110 01110101 01101101 01100010 01100101 01110010 00111010 00100000 00000000
00001010 00000000    WRITE_TO 0

;; Read input
                     ;; Temporarily use FOR1
00001110 00000001    MAKE_MARKER 1
00001001 00000000    | READ_CHAR_FROM 0
                     | ;; Check if char is a number (48-57)
00000111             | DUP_TOP
00000111             | DUP_TOP
00000100 00110000    | PUSH_STACK 48
11100110             | GREATER_EQUAL_THAN
10010001             | ROT_TWO
00000100 00111001    | PUSH_STACK 57
11100011             | LESS_EQUAL_THAN
11000001             | BINARY_AND
10100000 00001000    | IF_RUN_NEXT 8
                     | | ;; Add the char to number
00000100 00110000    | | PUSH_STACK 48
10000010             | | BINARY_SUBTRACT
00000010 00000011    | | LOAD_MEMORY 3
00000100 00001010    | | PUSH_STACK 10
10000101             | | BINARY_MULTIPLY
10000001             | | BINARY_ADD
00000011 00000011    | | STORE_MEMORY 3
                     | | ;; Loop back
00001111 00000001    | | GOTO_MARKER 1
                     ;; Clean up stack
00000001             POP_STACK

                     ;; Initialize y
00000010 00000011    LOAD_MEMORY 3
00000100 00000001    PUSH_STACK 1
10000010             BINARY_SUBTRACT
00000011 00000100    STORE_MEMORY 4

                     ;; Begin first loop
00001110 00000001    MAKE_MARKER 1
00000010 00000100    LOAD_MEMORY 4
00000100 00000000    PUSH_STACK 0
11100110             GREATER_EQUAL_THAN
10100000 00101101    IF_RUN_NEXT 45
                     | ;; Initialize i
00000100 00000000    | PUSH_STACK 0
00000011 00000101    | STORE_MEMORY 5
                     | ;; Begin second loop
00001110 00000010    | MAKE_MARKER 2
00000010 00000101    | LOAD_MEMORY 5
00000010 00000100    | LOAD_MEMORY 4
11100010             | LESS_THAN
10100000 00000111    | IF_RUN_NEXT 7
00000100 00100000    | | PUSH_STACK 32
00001010 00000000    | | WRITE_TO 0
                     | |
                     | | ;; Add 1 to i
00000010 00000101    | | LOAD_MEMORY 5
00000100 00000001    | | PUSH_STACK 1
10000001             | | BINARY_ADD
00000011 00000101    | | STORE_MEMORY 5
                     | |
00001111 00000010    | | GOTO_MARKER 2
                     |
                     | ;; Initialize x
00000100 00000000    | PUSH_STACK 0
00000011 00000101    | STORE_MEMORY 5
                     |
                     | ;; Begin third loop
00001110 00000010    | MAKE_MARKER 2
00000010 00000101    | LOAD_MEMORY 5
00000010 00000100    | LOAD_MEMORY 4
10000001             | BINARY_ADD
00000010 00000011    | LOAD_MEMORY 3
11100010             | LESS_THAN
10100000 00001111    | IF_RUN_NEXT 15
00000010 00000101    | | LOAD_MEMORY 5
00000010 00000100    | | LOAD_MEMORY 4
11000001             | | BINARY_AND
10100000 00000010    | | IF_RUN_NEXT 2
00000100 00100000    | | | PUSH_STACK 32
10100001 00000001    | | | SKIP_NEXT 1
00000100 00101010    | |   PUSH_STACK 42
00001010 00000000    | | WRITE_TO 0
00000100 00100000    | | PUSH_STACK 32
00001010 00000000    | | WRITE_TO 0
                     | |
                     | | ;; Add 1 to x
00000010 00000101    | | LOAD_MEMORY 5
00000100 00000001    | | PUSH_STACK 1
10000001             | | BINARY_ADD
00000011 00000101    | | STORE_MEMORY 5
                     | |
00001111 00000010    | | GOTO_MARKER 2
                     |
00000100 00001010    | PUSH_STACK 10
00001010 00000000    | WRITE_TO 0
                     |
                     | ;; Subtract 1 from y
00000010 00000100    | LOAD_MEMORY 4
00000100 00000001    | PUSH_STACK 1
10000010             | BINARY_SUBTRACT
00000011 00000100    | STORE_MEMORY 4
                     |
00001111 00000001    | GOTO_MARKER 1