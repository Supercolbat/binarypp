;; Returns the nth fibonacci number ;;

[RESERVED, LOOP_MARKER, n, a, b, c, ten]
[0       , 1          , 2, 3, 4, 5, 6  ]

;; Initialize variables
00000100 00000001    PUSH_STACK 1
00000011 00000100    STORE_MEMORY 4 [b]
00000100 00000001    PUSH_STACK 1
00000011 00000110    STORE_MEMORY 6 [ten]

;; Read number
                     PUSH_STRING_STACK "Enter a number: "
00000101 01000101 01101110 01110100 01100101 01110010 00100000 01100001 00100000 01101110 01110101 01101101 01100010 01100101 01110010 00111010 00100000 00000000
00001010 00000000    WRITE_TO 0

00001110 00000001    MAKE_MARKER 1
00001001 00000000    | READ_CHAR_FROM 0
                     | ;; Check if char is a number (48-57)
00000111             | DUP_TOP
00000111             | DUP_TOP
00000100 00110000    | PUSH_STACK 48
11100110             | GREATER_EQUAL_THAN
10010001             | ROT_TWO
00000100 00111001    | PUSH_STACK 57
11100011             | LESS_EQUAL_THAN
11000001             | BINARY_AND
10100000 00001000    | IF_RUN_NEXT 8
                     | | ;; Add the char to number
00000100 00110000    | | PUSH_STACK 48
10000010             | | BINARY_SUBTRACT
00000010 00000010    | | LOAD_MEMORY 2
00000100 00001010    | | PUSH_STACK 10
10000101             | | BINARY_MULTIPLY
10000001             | | BINARY_ADD
00000011 00000010    | | STORE_MEMORY 2
                     | | ;; Loop back
00001111 00000001    | | GOTO_MARKER 1

;;; Check if inputted number is 0
00000010 00000010    LOAD_MEMORY 2
00000100 00110000    PUSH_STACK 48
11100001             EQUALS_TO
10100000 00000011    IF_RUN_NEXT 3
00000100 00110000    | PUSH_STACK 48
00001010 00000000    | WRITE_TO 0
10100001 00111011    | SKIP_NEXT 59


;; Calculate number
00001110 00000001    MAKE_MARKER 1
00000010 00000010    LOAD_MEMORY 2 [n]
00000100 00000000    PUSH_STACK 0
11100100             GREATER_THAN
10100000 00001101    IF_RUN_NEXT 13
00000010 00000100    |  LOAD_MEMORY 4 [b]
00000011 00000101    |  STORE_MEMORY 5 [c]
                     |
00000010 00000011    |  LOAD_MEMORY 3 [a]
00000010 00000100    |  LOAD_MEMORY 4 [b]
10000001             |  BINARY_ADD
00000011 00000100    |  STORE_MEMORY 4 [b]
                     |
00000010 00000101    |  LOAD_MEMORY 5 [c]
00000011 00000011    |  STORE_MEMORY 3 [a]
                     |
                     |  ;; Subtract 1 from n
00000010 00000010    |  LOAD_MEMORY 2 [n]
00000100 00000001    |  PUSH_STACK 1
10000010             |  BINARY_SUBTRACT
00000011 00000010    |  STORE_MEMORY 2 [n]
                     |
00001111 00000001    |  GOTO_MARKER 1

;; Find highest divisor that is a multiple of 10
00001110 00000001    MAKE_MARKER 1
00000010 00000110    LOAD_MEMORY 6 [ten]
00000010 00000011    LOAD_MEMORY 3 [a]
11100011             LESS_EQUAL_THAN
10100000 00000101    IF_RUN_NEXT 5
00000010 00000110    |  LOAD_MEMORY 6 [ten]
00000100 00001010    |  PUSH_STACK 10
10000101             |  BINARY_MULTIPLY
00000011 00000110    |  STORE_MEMORY 6 [ten]
00001111 00000001    |  GOTO_MARKER 1
00000010 00000110    LOAD_MEMORY 6 [ten]
00000100 00001010    PUSH_STACK 10
10001010             BINARY_FLOOR_DIVIDE
00000011 00000110    STORE_MEMORY 6 [ten]

;; Print number
00001110 00000001    MAKE_MARKER 1
00000010 00000110    LOAD_MEMORY 6 [ten]
00000100 00000000    PUSH_STACK 0
11100100             GREATER_THAN
10100000 00001111    IF_RUN_NEXT 15
00000010 00000011    |  LOAD_MEMORY 3 [a]
00000010 00000110    |  LOAD_MEMORY 6 [ten]
10001010             |  BINARY_FLOOR_DIVIDE
00000100 00110000    |  PUSH_STACK 48
10000001             |  BINARY_ADD
00001010 00000000    |  WRITE_TO 0
                     |
00000010 00000011    |  LOAD_MEMORY 3 [a]
00000010 00000110    |  LOAD_MEMORY 6 [ten]
10000100             |  BINARY_MODULO
00000011 00000011    |  STORE_MEMORY 3 [a]
                     |
00000010 00000110    |  LOAD_MEMORY 6 [ten]
00000100 00001010    |  PUSH_STACK 10
10001010             |  BINARY_FLOOR_DIVIDE
00000011 00000110    |  STORE_MEMORY 6 [ten]
                     |
00001111 00000001    |  GOTO_MARKER 1

;; Print newline
00000100 00001010    PUSH_STACK 10
00001010 00000000    WRITE_TO 0